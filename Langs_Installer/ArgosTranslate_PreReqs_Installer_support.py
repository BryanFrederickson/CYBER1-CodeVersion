#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Feb 25, 2025 07:39:20 PM PST  platform: Windows NT

import tkinter as tk
import tkinter.scrolledtext as st
import tkinter.ttk as ttk
from tkinter.constants import *
from ScrolledCheckedListBox import ScrolledCheckedListBox
import argostranslate.package
from tkinter import font

import ArgosTranslate_PreReqs_Installer

_debug = True  # False to eliminate debug printing from callback functions.


def main(*args):
    init_langs()
    """Main entry point for the application."""
    global root
    root = tk.Tk()
    root.protocol("WM_DELETE_WINDOW", root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = ArgosTranslate_PreReqs_Installer.Toplevel1(_top1)
    init(_top1, _w1)
    root.mainloop()


def init_langs():
    argostranslate.package.update_package_index()
    available_packages = argostranslate.package.get_available_packages()
    langs = set()
    lang_packages = dict()
    installed_langs = set()
    installed_lang_packages = dict()
    for package in available_packages:
        if package.from_code != "en":
            langs.add(package.from_code)
        lang_packages[(package.from_code, package.to_code)] = package

    global bothway_langs
    bothway_langs = dict()
    for lang in langs:
        if (lang, "en") in lang_packages and ("en", lang) in lang_packages:
            from_entry = lang_packages[(lang, "en")]
            to_entry = lang_packages[("en", lang)]
            bothway_langs[f"{from_entry.from_name} <-> English"] = (
                from_entry,
                to_entry,
            )
    global valid_langs, valid_langs_count
    valid_langs = list(bothway_langs.keys())
    valid_langs.sort()
    valid_langs_count = len(valid_langs)


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

    initialize_custom_widget()


def on_click(s=None):
    # ======================================================
    # On event, scrolled frame returns a list containing:
    #    item number selected
    #    text of checkbox selected
    # ======================================================
    current_count = len(w.C_scrolledChecklist.get())
    w.L_langsInstallCount.config(text=f"Languages to Install: {current_count}")
    if current_count > 0:
        w.B_install.configure(state="normal")
    else:
        w.B_install.configure(state="disabled")


def on_btnClearChecks(*args):
    w.C_scrolledChecklist.clear()


"""
def on_btnExit(*args):
    destroy_window()


def on_btnGetChecks(*args):
    lst = w.C_scrolledChecklist.get()
    print(lst)
"""

def print_to_outputText(input:str):
    w.C_outputTextScrolled.configure(state="normal")
    w.C_outputTextScrolled.insert(
        tk.END,
        input,
    )
    w.C_outputTextScrolled.see(tk.END)
    w.C_outputTextScrolled.configure(state="disabled")
    root.update()
    root.after(20)


# see ScrolledCheckedListBox for added 'select all' functionality
def selectAll(*args):
    w.C_scrolledChecklist.all()
    w.L_langsInstallCount.config(
        text=f"Languages to Install: {len(w.C_scrolledChecklist.get())}"
    )
    w.B_install.configure(state="normal")


def clearAll(*args):
    w.C_scrolledChecklist.clear()
    w.L_langsInstallCount.config(text="Languages to Install: 0")
    w.B_install.configure(state="disabled")


def initialize_custom_widget():
    w.C_scrolledChecklist.cback = on_click
    # To use a single list of item names comment out the next line and
    # uncomment the second line down.
    # w.C_scrolledChecklist.load(ListInfo2)
    w.C_scrolledChecklist.load(valid_langs)


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


Custom = tk.Frame  # To be updated by user with name of custom widget.
Custom = ScrolledCheckedListBox

Custom2 = tk.Frame  # To be updated by user with name of custom widget.
Custom2 = st.ScrolledText


def install_Langs():
    w.F_install.tkraise()
    root.update()
    root.after(200)
    selected_langs = w.C_scrolledChecklist.get()
    for lang_pair in selected_langs:
        print_to_outputText(f"Installing {lang_pair}\n")
        curr_package = bothway_langs[lang_pair][0]
        print_to_outputText(f" - Installing {curr_package.from_name} -> {curr_package.to_name}\n")
        argostranslate.package.install_from_path(curr_package.download())
        curr_package = bothway_langs[lang_pair][1]
        print_to_outputText(f" - Installing {curr_package.from_name} -> {curr_package.to_name}\n")
        argostranslate.package.install_from_path(curr_package.download())
    w.L_installStatus.configure(
        font="-family {Segoe UI} -size 12 -weight bold -slant italic",
        text="Installation Complete.",
    )

if __name__ == "__main__":
    ArgosTranslate_PreReqs_Installer.start_up()
